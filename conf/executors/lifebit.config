/*
 * -------------------------------------------------
 *  Nextflow config for running on Lifebit CloudOS
 * -------------------------------------------------
 * Defines bundled configurations for process running
 * on Lifebit CloudOS
 */
params{
	processors = 8
	dsname = 'CIHuman'
    input = 'https://github.com/TheJacksonLaboratory/nanome/raw/master/test_data/human_ci_test_fast5.tar.gz'
	reference_genome = 'https://zenodo.org/record/5513090/files/hg38_chr22.tar.gz'

	outputDir = 'results'

 	useDeepModCluster = false
    moveOption = true
	chrSet = true

    cleanCache = false

    errorStrategy = 'ignore'

    // Lifebit platform settings
	zoneCloud = 'us-east1-b'
	networkLifebit = 'jax-cloudos-shengli-vpc'
	subnetworkLifebit = 'cloudos-subnet'
	containerOptions = '--gpus all'
}

google {
	zone = params.zoneCloud
	// region = params.googleRegion
	// location = params.googleLocation
	network = params.networkLifebit
	subnetwork = params.subnetworkLifebit
	lifeSciences.bootDiskSize = params.bootDiskSizeCloud
	lifeSciences.preemptible = params.preemptibleCloud
	lifeSciences.debug = true
	lifeSciences.sshDaemon = true
}

docker{
	enabled = true
	runOptions = params.containerOptions
	envWhitelist = 'CUDA_VISIBLE_DEVICES' // Ref: https://www.nextflow.io/docs/latest/config.html#scope-docker
}

executor {
    name = 'google-lifesciences'
}

process {
	container = params.docker_name
	machineType = params.machineType
	disk = params.midDiskSize
	maxRetries = params.maxRetries
	echo = params.echo

	errorStrategy = { task.attempt == process.maxRetries ? params.errorStrategy : task.exitStatus in [10, 14] ? 'retry' : params.errorStrategy }

	withName: 'EnvCheck|Basecall|Guppy|Megalodon' { // allocate gpu
		accelerator = [request:  params.gpuNumber, type: params.gpuType]
		beforeScript = "export CUDA_VISIBLE_DEVICES=0" // pass CUDA var to process, since GCP do not export it
	}

	withName: 'Megalodon|Resquiggle|DeepSignal|DeepMod' { // allocate highmem machine type
		machineType = params.highmemMachineType
	}

	withName: 'Untar|Basecall|Guppy|Resquiggle' { // allocate high disk size
		disk = params.highDiskSize
	}
}

env {
	numProcessor = "${params.processors}"
}
