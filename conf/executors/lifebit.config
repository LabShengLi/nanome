/*
 * -------------------------------------------------
 *  Nextflow config for running on Lifebit CloudOS
 * -------------------------------------------------
 * Defines bundled configurations for process running
 * on Lifebit CloudOS
 */
params{
	dsname = 'CIHuman'
    input = 'https://github.com/TheJacksonLaboratory/nanome/raw/master/test_data/human_ci_test_fast5.tar.gz'
	genome = 'hg38_chr22'

	outdir = 'results'

 	useDeepModCluster = false
    moveOption = true

    errorStrategy = 'ignore'
    maxRetries = 10

    // Lifebit CloudOS platform settings
    networkLifebit = 'jax-cloudos-shengli-vpc'
	subnetworkLifebit = 'cloudos-subnet'
    googleLocation = 'us'
	googleRegion = 'us-east1'
	zoneCloud = 'us-east1-b'
	containerOptions = '--gpus all'
	bootDiskSizeCloud = 30.GB
	preemptibleCloud = true // save costs using preemptible way
	googleDebug = true
	googleSshDaemon = true

	machineType = "n1-standard-8" // or "n1-highmem-16", ref: https://cloud.google.com/compute/docs/general-purpose-machines#n1-shared-core
	gpuType = 'nvidia-tesla-p100' // lower price than v100, ref: https://cloud.google.com/compute/gpus-pricing
	gpuNumber = 1
	highmemMachineType = "n1-highmem-16"  // n1-highmem-16 16 104, n1-standard-8 8 30
	processors = 8

	lowDiskSize = 100.GB // for test and check
	midDiskSize = 150.GB // for methylation
	highDiskSize = 200.GB // for untar, basecall and resquiggle
}

google {
	zone = params.zoneCloud
	// region = params.googleRegion
	// location = params.googleLocation
	network = params.networkLifebit
	subnetwork = params.subnetworkLifebit
	lifeSciences.bootDiskSize = params.bootDiskSizeCloud
	lifeSciences.preemptible = params.preemptibleCloud
	lifeSciences.debug = params.googleDebug
	lifeSciences.sshDaemon = params.googleSshDaemon
}

docker{
	enabled = true
	runOptions = params.containerOptions
	envWhitelist = 'CUDA_VISIBLE_DEVICES' // Ref: https://www.nextflow.io/docs/latest/config.html#scope-docker
}

executor {
    name = 'google-lifesciences'
}

process {
	container = params.docker_name
	machineType = params.machineType
	cpus = params.processors
	disk = params.midDiskSize
	maxRetries = params.maxRetries
	echo = params.echo

	errorStrategy = { task.attempt >= process.maxRetries ? params.errorStrategy : task.exitStatus in [2, 10, 14] ? 'retry' : params.errorStrategy }

	withName: 'EnvCheck' {
		errorStrategy = {task.attempt >= process.maxRetries ? params.errorStrategy :  task.exitStatus in [1, 2, 10, 14] ? 'retry' : params.errorStrategy }
	}

	withName: 'EnvCheck|Basecall|Guppy|Megalodon' { // allocate gpu
		machineType = params.highmemMachineType
		accelerator = [request:  params.gpuNumber, type: params.gpuType]
		beforeScript = "export CUDA_VISIBLE_DEVICES=0" // pass CUDA var to process, since GCP do not export it
		containerOptions = { workflow.containerEngine == "singularity" ? '--nv':
       									( workflow.containerEngine == "docker" ? '--gpus all': null ) }
	}

	withName: 'Resquiggle|DeepSignal|DeepMod|METEORE' { // allocate highmem machine type
		machineType = params.highmemMachineType
	}

	withName: 'Untar|Basecall|Guppy|Resquiggle' { // allocate high disk size
		disk = params.highDiskSize
	}
}

env {
	PATH = null
}
