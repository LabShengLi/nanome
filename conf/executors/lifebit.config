/*
 * -------------------------------------------------
 *  Nextflow config for running on Lifebit CloudOS
 * -------------------------------------------------
 * Defines bundled configurations for process running
 * on Lifebit CloudOS
 */
params{
	dsname = 'CIHuman'
    input = 'https://github.com/LabShengLi/nanome/raw/master/test_data/human_ci_test_fast5.tar.gz'
	genome = 'hg38_chr22'

	outdir = 'results'

 	useDeepModCluster = false
    moveOption = false

    errorStrategy = 'ignore'
    maxRetries = 10

    // Lifebit CloudOS platform settings
    projectCloud = null
    networkCloud = 'jax-cloudos-shengli-vpc'
	subnetworkCloud = 'cloudos-subnet'
    locationCloud = 'us'
	regionCloud = null // 'us-east1', Lifebit is not support region, but zone
	zoneCloud = 'us-east1-c' // check GPU available in zones: https://cloud.google.com/compute/docs/gpus/gpu-regions-zones
	containerOptions = '--gpus all'
	bootDiskSizeCloud = 30.GB
	preemptibleCloud = true // save costs using preemptible way
	debugCloud = true
	sshDaemonCloud = true

	machineType = "n1-standard-8"  // or n1-highmem-8
	processors = 8
	memory = '30 GB'
	time = null
	gpuType = 'nvidia-tesla-p100'
	gpuNumber = 1

	lowDiskSize = 100.GB // for test and check
	midDiskSize = 150.GB // for methylation
	highDiskSize = 200.GB // for untar, basecall and resquiggle
}

google {
	location = params.locationCloud
	region = params.regionCloud
	zone = params.zoneCloud

	network = params.networkCloud
	subnetwork = params.subnetworkCloud

	lifeSciences.bootDiskSize = params.bootDiskSizeCloud
	lifeSciences.preemptible = params.preemptibleCloud
	lifeSciences.debug = params.debugCloud
	lifeSciences.sshDaemon = params.sshDaemonCloud
}

docker{
	enabled = true
	runOptions = params.containerOptions
	envWhitelist = 'CUDA_VISIBLE_DEVICES,HDF5_PLUGIN_PATH' // Ref: https://www.nextflow.io/docs/latest/config.html#scope-docker
}

executor {
    name = 'google-lifesciences'
}

process {
	container = params.docker_name
	machineType = params.machineType
	cpus = params.processors
	memory = params.memory
	time = null
	disk = params.midDiskSize
	maxRetries = params.maxRetries
	echo = params.echo

	errorStrategy = { task.attempt >= process.maxRetries ?
		params.errorStrategy : task.exitStatus in [2, 10, 14] ? 'retry' : params.errorStrategy }

	withName: 'ENVCHECK' {
		errorStrategy = {task.attempt >= process.maxRetries ?
			params.errorStrategy :  task.exitStatus in [1, 2, 10, 14] ? 'retry' : params.errorStrategy }
	}

	withName: 'ENVCHECK|BASECALL|Guppy|MEGALODON' { // allocate gpu
		accelerator = [request:  params.gpuNumber, type: params.gpuType]
		beforeScript = "export CUDA_VISIBLE_DEVICES=0" // pass CUDA var to process, since GCP do not export it
		containerOptions = { workflow.containerEngine == "singularity" ? '--nv':
       									( workflow.containerEngine == "docker" ? '--gpus all': null ) }
	}

	withName: 'UNTAR|BASECALL|Guppy|RESQUIGGLE' { // allocate high disk size
		disk = params.highDiskSize
	}

	withName: 'CLAIR3' {
		// container = 'hkubal/clair3:latest'
		container = params.clair3_docker_name
	}

	withName: 'Tombo|DeepMod|METEORE' {
		// container = 'liuyangzzu/nanome:v1.4'
		container = params.tombo_docker_name
	}
}

env {
	PATH = null
	// for container, fast5 gz format need export this env
	HDF5_PLUGIN_PATH = "/opt/conda/envs/nanome/hdf5/lib/plugin"
}
