params {
	// nanome running software env for Conda, Docker and Singularity
	conda_name="/home/liuya/anaconda3/envs/nanome"
	docker_name="liuyangzzu/nanome:latest"
	singularity_name="docker://liuyangzzu/nanome:latest"
	singularity_cache_dir='~/.singularity/cache'

	// process and executor configurations
	executor = false
	echo = false
	queueSize = 50
	config = 'conf/standard.config'

	// Default input params for pipeline running
	// dsname = 'TestData'
	// input = 'https://raw.githubusercontent.com/liuyangzzu/nanome/master/inputs/test.demo.filelist.txt'
	dsname = null
	input = null
	outputDir="outputs"

	runid = "TestData_RRBS"
	bgEncode='bismark'
	bgTruth = ''
	bgtruth_cov=1
	tool_cov=1

	// Reference genome from online inputs
	dataType="human"  // can be human, ecoli, etc.
	// referenceGenome="reference_genome/hg38/hg38.fasta"
	// chromSizesFile="reference_genome/hg38/hg38.chrom.sizes"

	// slurm default parameters
	queueName = 'gpu'
	qosName = 'inference'
	gresGPUOptions = '--gres=gpu:v100:1'
	jobMaxTime = '05:00:00'
	jobMaxMem = '32G'

	// true if clean work dir when pipeline complete
	cleanCache = true

	//##################################################################
	//############### Reserved by tools default settings ###############
	//##################################################################
	//##################################################################
	// Default tool running configuration
	runNanopolish=true
	runMegalodon=true
	runDeepSignal=true
	runGuppy=true
	runTombo=true
	runDeepMod=true
	runResquiggle=true
	runCombine=true
	runMETEORE=true

	// Split tasks for two platform in JAX, true if only run GPU tasks
	filterGPUTaskRuns=false

	runBasecall=true
	runMethcall=true

	// if perform evaluations after callings
	eval=false
	outputQC=true
	outputIntermediate=false
	outputRaw=true

	// Resquiggle specifications
	BasecallGroupName="Basecall_1D_000" // Basecall ID name used by resquiggle
	cleanAnalyses=false // true if clean previous analysis in fast5 inputs
	resquiggleCorrectedGroup="RawGenomeCorrected_000"

	// DeepMod options
	useDeepModCluster=true
	moveOption=true // options of Guppy basecalled input for DeepMod, empty for Albacore usage
	chrSet=' ' //used by DeepMod, default "" means all Human chromosomes, else need to specify such as chr1,chr2

	// Guppy model specificatoins
	// Suggested model by Guppy basecall
	GUPPY_BASECALL_MODEL="dna_r9.4.1_450bps_hac.cfg"
	// Suggested model by Guppy methcall
	// GUPPY_METHCALL_MODEL="dna_r9.4.1_450bps_modbases_dam-dcm-cpg_hac.cfg" //  for Guppy v4.2.2
	GUPPY_METHCALL_MODEL='dna_r9.4.1_450bps_modbases_5mc_hac.cfg'

	// The suggested model and options by Megalodon
	MEGALODON_MODEL_FOR_GUPPY_CONFIG="res_dna_r941_min_modbases_5mC_v001.cfg"
	GUPPY_TIMEOUT = 300
	READS_PER_GUPPY_BATCH = 100
	SAMTOOLS_PATH="samtools"
	guppyDir = ''

	// DeepMod default used model specifications
	DeepModGithub = "https://github.com/WGLab/DeepMod/archive/refs/tags/v0.1.3.tar.gz"
	DEEPMOD_RNN_MODEL = "rnn_conmodC_P100wd21_f7ne1u0_4/mod_train_conmodC_P100wd21_f3ne1u0"
	DEEPMOD_CLUSTER_MODEL = "na12878_cluster_train_mod-keep_prob0.7-nb25-chr1/Cg.cov5.nb25"

	// METEORE Github
	METEOREGithub = "https://github.com/comprna/METEORE/archive/refs/tags/v1.0.0.tar.gz"
	METEORE_Dir = "METEORE-1.0.0"

	// DeepSignal model
	DEEPSIGNAL_MODEL = 'model.CpG.R9.4_1D.human_hx1.bn17.sn360.v0.1.7+/bn_17.sn_360.epoch_9.ckpt'

	// for deep-learning jobs, we use processors*times as multiprocessing options
	deepLearningProcessorTimes = 8

	// Default nanome pipeline input data settings
	processors = 8
	untarProcessors = 8

	// Default online input used by pipeline, located in zenodo,
	// such as https://zenodo.org/record/5510670
	zenodoNumber="5513090"
	deepmod_ctar = "https://zenodo.org/record/${zenodoNumber}/files/C.tar.gz"
	genome_annotation = "https://zenodo.org/record/${zenodoNumber}/files/genome-annotation.tar.gz"
	reference_genome = "https://zenodo.org/record/${zenodoNumber}/files/hg38.tar.gz"
	// reference_genome = "https://zenodo.org/record/${zenodoNumber}/files/ecoli.tar.gz"
	deepsignal_model_tar = "https://zenodo.org/record/${zenodoNumber}/files/model.CpG.R9.4_1D.human_hx1.bn17.sn360.v0.1.7%2B.tar.gz"
	megalodon_model_tar = "https://zenodo.org/record/${zenodoNumber}/files/megalodon_model.tar.gz"

	refGenomePath = false //Specify the ref genome path if not use default path
	chromSizesPath = false //Specify the chom size path if not use default path

	//##################################################################
	//############### Reserved by google cloud computing ###############
	//##################################################################
	//##################################################################
	// Google cloud computing configurations defaults
	// used for google computing platform
	googleProjectName = 'jax-nanopore-01'
	googleLocation = 'us'
	googleRegion = 'us-east1'
	gls_bootDiskSize = 30.GB

	maxRetries = 5

	machineTypeLowCost = 'custom-8-32768'
	gpuTypeLowCost = 'nvidia-tesla-p100' // low price than v100
	gpuNumberLowCost = 1

	machineType = "n1-highmem-16"
	gpuType = 'nvidia-tesla-p100' // lower price than v100, ref: https://cloud.google.com/compute/gpus-pricing
	gpuNumber = 1

	lowDiskSize = 100.GB // for test and check
	midDiskSize = 150.GB // for methylation
	highDiskSize = 200.GB // for untar, basecall and resquiggle

	// Lifebit cloudOS configurations start here
	// gpu task related params
	containerOptions = '--gpus all'
	accelerator  = 'nvidia-tesla-p100'
	n_accelerators = 1
	with_gpus_process_cpus = 4
	with_gpus_process_memory = '24.GB'

	// cpu task resource allocation
	cpu_process_cpus = 8
	cpu_process_memory = '32.GB'

	gls_preemptible = true
	zone = 'us-east1-b'
	network = 'jax-cloudos-shengli-vpc'
	subnetwork =  'cloudos-subnet'
	//##################################################################
	//########################### End of block #########################
	//##################################################################
	//##################################################################

}

// Running on different platforms
profiles {
	standard { includeConfig params.config }

	ci { includeConfig 'conf/ci.config' }

	ci_human { includeConfig 'conf/ci_human.config' }

	conda {
		process.conda = params.conda_name
	}

	docker {
		process.container = params.docker_name
		docker.enabled = true
		docker.temp = 'auto'
		docker.envWhitelist = 'CUDA_VISIBLE_DEVICES' // Ref: https://www.nextflow.io/docs/latest/config.html#scope-docker
	}

	singularity {
		process {
			container = params.singularity_name
			beforeScript = "module load singularity"
		}

		singularity {
			enabled = true
			autoMounts = true
			cacheDir = params.singularity_cache_dir
			envWhitelist = 'CUDA_VISIBLE_DEVICES' // Ref: https://github.com/nextflow-io/nextflow/issues/776
		}
	}

	hpc {
		process {
			executor = 'slurm'
			cache = 'lenient'
			queue = params.queueName
			clusterOptions = "-q ${params.qosName} -n ${params.processors}  ${params.gresGPUOptions == true ? ' ' : params.gresGPUOptions} --time=${params.jobMaxTime} --mem=${params.jobMaxMem}"
		}
	}

	// Google cloud computing platform
	google {
		executor {
			name = 'google-lifesciences'
			pollInterval = '30 sec'
		}

		google {
			project = params.googleProjectName
			//zone = 'us-east1-c'
			location = params.googleLocation
			region = params.googleRegion
			lifeSciences.debug = true
			lifeSciences.preemptible = true
			lifeSciences.usePrivateAddress = false
			lifeSciences.sshDaemon = true
			lifeSciences.bootDiskSize = params.gls_bootDiskSize
			enableRequesterPaysBuckets = true
			lifeSciences.network = 'default'
			lifeSciences.subnetwork = 'default'
		}

		// Include nanome input from google cloud params
		// includeConfig 'conf/gc_params.config'
		process {
			machineType = params.machineType
			disk = params.midDiskSize
			maxRetries = params.maxRetries
			// Ref: https://cloud.google.com/life-sciences/docs/troubleshooting
			errorStrategy = {task.attempt == process.maxRetries ? 'ignore' :  task.exitStatus in [10, 14] ? 'retry' : 'ignore' }
			cache = 'lenient'

			withName: 'EnvCheck|Basecall|Guppy|Megalodon' {
				machineType = params.machineType
				accelerator = [request:  params.gpuNumber, type: params.gpuType]
				beforeScript = "export CUDA_VISIBLE_DEVICES=0" // pass CUDA var to process
			}

			withName: 'Untar|Basecall|Guppy|Resquiggle' { // allocate high disk size
				disk = params.highDiskSize
			}
		}
	}
}

env {
	PATH = params.guppyDir.equals('') ? '$PATH':["${params.guppyDir}/bin", '$PATH'].join(':')
	numProcessor = "${params.processors}"
	CUDA_VISIBLE_DEVICES='${CUDA_VISIBLE_DEVICES:-}'
}

executor {
	name = params.executor
	queueSize = params.queueSize
}

manifest {
	homePage = 'https://nanome.jax.org'
	description = 'NANOME pipeline of DNA methylation calling for Oxford Nanopore sequencing'
	mainScript = 'main.nf'
	version = '1.3'
}